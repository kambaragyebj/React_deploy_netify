React-- React, sometimes referred to as a frontend JavaScript framework, is a JavaScript library created by Facebook.

React is a tool for building UI components.

------ React creates a VIRTUAL DOM in memory.

############### To use React in production, you need npm which is included with Node.js.


     <div id="mydiv"></div>

    <script type="text/babel">
    
      function Hello() {
      
        return <h1>Hello World!</h1>;
        
      }

      const container = document.getElementById('mydiv');
      
      const root = ReactDOM.createRoot(container);
      
      root.render(<Hello />)
      
    </script
    
    
    
    ##############################################
    
import React from 'react';
import ReactDOM from 'react-dom/client';

const myFirstElement = <h1>Hello React!</h1>

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(myFirstElement);



=#############################################

import ReactDOM from 'react-dom/client';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

#############################################

+++++++++++++++++++++++++++++++++++++++

What is a correct command to create a React application
*** npx create-react-app my-team
============================================================================================================
1. ************* Classes
class Car {
  constructor(name) {
    this.brand = name;
  }
  
  present() {
    return 'I have a ' + this.brand;
  }
}

const mycar = new Car("Ford");
mycar.present();

2. ************ Class Inheritance

class Car {
  constructor(name) {
    this.brand = name;
  }

  present() {
    return 'I have a ' + this.brand;
  }
}

class Model extends Car {
  constructor(name, mod) {
    super(name);
    this.model = mod;
  }  
  show() {
      return this.present() + ', it is a ' + this.model
  }
}
const mycar = new Model("Ford", "Mustang");
mycar.show();


3.***************** Arrow function -- Arrow functions allow us to write shorter function syntax:

hello = function() {
  return "Hello World!";
}


hello = () => {
  return "Hello World!";
}

** with parameterscolor
hello = (val) => "Hello " + val;


// default 
hello = () => "Hello World!";

document.getElementById("demo").innerHTML = hello();


##################################### Array method MAP
1. The .map() method allows you to run a function on each item in the array, returning a new array as the result. The map() method is used to run a function on every item in an array

const myArray = ['apple', 'banana', 'orange'];

const myList = myArray.map((item) => <p>{item}</p>)


import React from 'react';
import ReactDOM from 'react-dom/client';

const myArray = ['apple', 'banana', 'orange'];

const myList = myArray.map((item) => <p>{item}</p>)

const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(myList);




import React from 'react';

const UserList = () => {
    const users = [
        { id: 1, name: 'Alice' },
        { id: 2, name: 'Bob' },
        { id: 3, name: 'Charlie' }
    ];

    return (
        <ul>
            {users.map(user => ( <li key={user.id}>{user.name}</li>)
                      )
            }
        </ul>
    );
};
################## Example: Rendering Components Dynamically

import React from 'react';

const UserCard = ({ name, email }) => (
    <div className="user-card">
        <h3>{name}</h3>
        <p>{email}</p>
    </div>
);

const UserList = () => {
    const users = [
        { id: 1, name: 'Alice', email: 'alice@example.com' },
        { id: 2, name: 'Bob', email: 'bob@example.com' },
        { id: 3, name: 'Charlie', email: 'charlie@example.com' }
    ];

    return (
        <div className="user-list">
            {users.map(user => (
                <UserCard 
                    key={user.id}
                    name={user.name}
                    email={user.email}
                />
            ))}
        </div>
    );
};

export default UserList;


################################ Example: Adding Dynamic List Updates (State)


import React, { useState } from 'react';

const App = () => {
    const [items, setItems] = useState([]);
    const [newItem, setNewItem] = useState('');

    const addItem = () => {
        setItems([...items, newItem]);
        setNewItem(''); // Clear input field
    };

    return (
        <div>
            <input 
                type="text"
                value={newItem}
                onChange={(e) => setNewItem(e.target.value)}
            />
            <button onClick={addItem}>Add Item</button>

            <ul>
                {items.map((item, index) => (
                    <li key={index}>{item}</li>
                ))}
            </ul>
        </div>
    );
};

export default App;


=============== Destructing 

const vehicles = ['mustang', 'f-150', 'expedition'];

// old way
const car = vehicles[0];
const truck = vehicles[1];
const suv = vehicles[2];

// new way
const vehicles = ['mustang', 'f-150', 'expedition'];

const [car, truck, suv] = vehicles;



++++++++++++++If we only want the car and suv we can simply leave out the truck but keep the comma:

const vehicles = ['mustang', 'f-150', 'expedition'];

const [car,, suv] = vehicles;

  
<script>
function calculate(a, b) {
  const add = a + b;
  const subtract = a - b;
  const multiply = a * b;
  const divide = a / b;

  return [add, subtract, multiply, divide];
}

const [add, subtract, multiply, divide] = calculate(4, 7);

document.write("<p>Sum: " + add + "</p>");
document.write("<p>Difference " + subtract + "</p>");
document.write("<p>Product: " + multiply + "</p>");
document.write("<p>Quotient " + divide + "</p>");
</script>
//////////////////////Notice that the object properties do not have to be declared in a specific order.
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';

  document.getElementById("demo").innerHTML = message;
}

###################referencing the nested object then using a colon and curly braces to again destructure the items needed from the nested object:

const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red',
  registration: {
    city: 'Houston',
    state: 'Texas',
    country: 'USA'
  }
}

myVehicle(vehicleOne)

function myVehicle({ model, registration: { state } }) {
  const message = 'My ' + model + ' is registered in ' + state + '.';

  document.getElementById("demo").innerHTML = message;
}
***********************************************************************

const family = ['Jane', 'John', 'Mike'];
What is a correct syntax to put 'Mike' as a value to x?
const [,,x] = family;

##################### React ES6 Spread Operator | The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.

const numbersOne = [1, 2, 3];
const numbersTwo = [4, 5, 6];
const numbersCombined = [...numbersOne, ...numbersTwo];



const numbers = [1, 2, 3, 4, 5, 6];

const [one, two, ...rest] = numbers;

document.write("<p>" + one + "</p>"); 1
document.write("<p>" + two + "</p>"); 2 
document.write("<p>" + rest + "</p>"); 3,4,5,6



++++++++++++++++++++++++++++++ Modules   | ES Modules rely on the import and export statements.


=======In-line individually:

person.js

export const name = "Jesse"
export const age = 40


===========All at once at the bottom:
person.js

const name = "Jesse"
const age = 40

export { name, age }


==============Default Exports


message.js

const message = () => {
  const name = "Jesse";
  const age = 40;
  return name + ' is ' + age + 'years old.';
};

export default message;


***************************Import


===============Import named exports from the file person.js:

import { name, age } from "./person.js";



===============================Import a default export from the file message.js:

import message from "./message.js";


*************************************Ternary Operator |The ternary operator is a simplified conditional operator like if / else.

if (authenticated) {
  renderApp();
} else {
  renderLogin();
}

/// using tenary operator
authenticated ? renderApp() : renderLogin();

=============================================================================== React Render HTML ==============================

React renders HTML to the web page by using a function called createRoot() and its method render().


The createRoot() function takes one argument, an HTML element.

The purpose of the function is to define the HTML element where a React component should be displayed.

But render where?

There is another folder in the root directory of your React project, named "public". In this folder, there is an index.html file.

You'll notice a single <div> in the body of this file. This is where our React application will be rendered.


import React from 'react';
import ReactDOM from 'react-dom/client';

const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(<p>Hello</p>);



======================================================JSX ---Javascript XML => It allows us to write HTML in react

**** With JSX you can write expressions inside curly braces { }.
import React from 'react';
import ReactDOM from 'react-dom/client';

const myElement = <h1>React is {5 + 5} times better with JSX</h1>;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);


Wrap two paragraphs inside a fragment:

const myElement = (
  <>
    <p>I am a paragraph.</p>
    <p>I am a paragraph too.</p>
  </>
);


************ Attribute class = className

const myElement = <h1 className="myclass">Hello World</h1>;


--------------Conditions - if statements

1. Write if statements outside of the JSX code:

import React from 'react';
import ReactDOM from 'react-dom/client';

const x = 5;
let text = "Goodbye";
if (x < 10) {
  text = "Hello";
}

const myElement = <h1>{text}</h1>;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);
///////////////////////////////////////////////////////////////////////////With Itineray
import React from 'react';
import ReactDOM from 'react-dom/client';

const x = 5;

const myElement = <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>;
///////////////Note that in order to embed a JavaScript expression inside JSX, the JavaScript must be wrapped with curly braces, {}.
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);

=================================== COMPONENTS | Components are like functions that return HTML elements.==============================================================================

1. Class components and Function components,|  It is now suggested to use Function components along with Hooks, 

Create a Class component called Car

class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}


Create a Function component called Car

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}


import React from 'react';
import ReactDOM from 'react-dom/client';

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);
/// using pros======================================
function Car(props) {
  return <h2>I am a {props.color} Car!</h2>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);

///////////////////////////Components in Components 

function Car() {
  return <h2>I am a Car!</h2>;
}

function Garage() {
  return (
    <>
      <h1>Who lives in my Garage?</h1>
      <Car /> /////componet Car call here
    </>
  );
}

============================= Components in Files
React is all about re-using code, and it is recommended to split your components into separate files.
To do that, create a new file with a .js file extension and put the code inside it:

This is the new file, we named it "Car.js":

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

export default Car;


To be able to use the Car component, you have to import the file in your application.

import React from 'react';
import ReactDOM from 'react-dom/client';
import Car from './Car.js';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);

==========================

Create a constructor function in the Car component, and add a color property:

class Car extends React.Component {
  constructor() {
    super();
    this.state = {color: "red"};
  }
  render() {
    return <h2>I am a {this.state.color} Car!</h2>;
  }
}

====================use props | Use an attribute to pass a color to the Car component
class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.color} Car!</h2>;
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);

//////////////Props in the Constructor

class Car extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}

============================State | Refer to the state object in the render() method:

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
      </div>
    );
  }
}
========================Changing the state Object | To change a value in the state object, use the this.setState() method.


import React from 'react';
import ReactDOM from 'react-dom/client';

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  changeColor = () => {
    this.setState({color: "blue"});
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
        <button
          type="button"
          onClick={this.changeColor}
        >Change color</button>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);


================= Lifecycle of Components | The three phases are: Mounting, Updating, and Unmounting.


1. Mounting
Mounting means putting elements into the DOM.

React has four built-in methods that gets called, in this order, when mounting a component:

constructor()
getDerivedStateFromProps()
render()
componentDidMount()
The render() method is required and will always be called, the others are optional and will be called if you define them.

////componentDidMount
The componentDidMount() method is called after the component is rendered.


import React from 'react';
import ReactDOM from 'react-dom/client';

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);



============  Updating | A component is updated whenever there is a change in the component's state or props.

React has five built-in methods that gets called, in this order, when a component is updated:

getDerivedStateFromProps() || This is the first method that is called when a component gets updated.
shouldComponentUpdate()
render()
getSnapshotBeforeUpdate()
componentDidUpdate()


static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  
 shouldComponentUpdate() { // This Stop the component from rendering at any update:
    return false;
  }
  
  == Use the getSnapshotBeforeUpdate() method to find out what the state object looked like before the update
  
  
  class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  getSnapshotBeforeUpdate(prevProps, prevState) {
    document.getElementById("div1").innerHTML =
    "Before the update, the favorite was " + prevState.favoritecolor;
  }
  componentDidUpdate() {
    document.getElementById("div2").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
        <h1>My Favorite Color is {this.state.favoritecolor}</h1>
        <div id="div1"></div>
        <div id="div2"></div>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);
  
  
  ====================== React Props |  React Props are like function arguments in JavaScript and attributes in HTML.
  
-------  Add a "brand" attribute to the Car element:

const myElement = <Car brand="Ford" />;

*********************Send the "brand" property from the Garage component to the Car component:

function Car(props) {
  return <h2>I am a { props.brand }!</h2>;
}

function Garage() {
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <Car brand="Ford" />
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);

**************use variable CarName

function Car(props) {
  return <h2>I am a { props.brand }!</h2>;
}

function Garage() {
  const carName = "Ford";
  const carInfo = { name: "Ford", model: "Mustang" }; /// object
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <Car brand={ carName } />
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);



================================== EVENTS

1. onClick instead of onclick.

2. onClick={shoot}  instead of onclick="shoot()".



import React from 'react';
import ReactDOM from 'react-dom/client';

function Football() {
  const shoot = () => {
    alert("Great Shot!");
  }

  return (
    <button onClick={shoot}>Take the shot!</button>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Football />);


=========================Passing Arguments to an event Handler , use an arrow
//() => shoot("Goal!")

function Football() {
  const shoot = (a) => {
    alert(a);
  }

  return (
    <button onClick={() => shoot("Goal!")}>Take the shot!</button>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Football />);


====================Arrow Function: Sending the event object manually: | This will come in handy when we look at Form in a later chapter.


function Football() {
  const shoot = (a, b) => {
    alert(b.type);
    /*
    'b' represents the React event that triggered the function,
    in this case the 'click' event
    */
  }

  return (
    <button onClick={(event) => shoot("Goal!", event)}>Take the shot!</button>
  );
}


============================= IF condition

function MissedGoal() {
	return <h1>MISSED!</h1>;
}

function MadeGoal() {
	return <h1>GOAL!</h1>;
}

function Goal(props) {
  const isGoal = props.isGoal;
  if (isGoal) {
    return <MadeGoal/>;
  }
  return <MissedGoal/>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Goal isGoal={false} />);

===============Ternary Operator

    <>
      { isGoal ? <MadeGoal/> : <MissedGoal/> }
    </>
    
    
=============================Pass array 

function Garage(props) {
  const cars = props.cars;
  return (
    <>
      <h1>Garage</h1>
      {cars.length > 0 &&
        <h2>
          You have {cars.length} cars in your garage.
        </h2>
      }
    </>
  );
}

const cars = ['Ford', 'BMW', 'Audi'];
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage cars={cars} />);

==================================== List | use MAP


Result Size: 635 x 494
import React from 'react';
import ReactDOM from 'react-dom/client';

function Car(props) {
  return <li>I am a { props.brand }</li>;
}

function Garage() {
   const cars = [
    {id: 1, brand: 'Ford'},
    {id: 2, brand: 'BMW'},
    {id: 3, brand: 'Audi'}
  ];
  return (
    <>
	    <h1>Who lives in my garage?</h1>
	    <ul>
              //{cars.map((car) => <Car brand={car} />)}
              {cars.map((car) => <Car key={car.id} brand={car.brand} />)}
            </ul>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);


========================================= FORM ============================================
1. In React, form data is usually handled by the components.
2. You can control changes by adding event handlers in the onChange attribute.
3. When the data is handled by the components, all the data is stored in the component state.

import React from 'react';
import ReactDOM from 'react-dom/client';

function MyForm() {
  return (
    <form>
      <label>Enter your name:
        <input type="text" />
      </label>
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);


=================================Use the useState Hook to manage the input:


import { useState } from "react";
import ReactDOM from 'react-dom/client';

function MyForm() {
  const [name, setName] = useState("");

  return (
    <form>
      <label>Enter your name:
        <input
          type="text" 
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </label>
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);

====================== Form Add a submit button and an event handler in the onSubmit attribute: =========================
import { useState } from 'react';
import ReactDOM from 'react-dom/client';

function MyForm() {
  const [name, setName] = useState("");

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(`The name you entered was: ${name}`)
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>Enter your name:
        <input 
          type="text" 
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </label>
      <input type="submit" />
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);

========================================Form Multiple Input =============================================

1. You can control the values of more than one input field by adding a name attribute to each element.
2. We will initialize our state with an empty object.
3.To access the fields in the event handler use the event.target.name and event.target.value syntax.
4. To update the state, use square brackets [bracket notation] around the property name


mport { useState } from 'react';
import ReactDOM from 'react-dom/client';

function MyForm() {
  const [inputs, setInputs] = useState({});

  const handleChange = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    setInputs(values => ({...values, [name]: value}))
  }

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(inputs);
    //console.log(inputs);
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>Enter your name:
      <input 
        type="text" 
        name="username" 
        value={inputs.username || ""} 
        onChange={handleChange}
      />
      </label>
      <label>Enter your age:
        <input 
          type="number" 
          name="age" 
          value={inputs.age || ""} 
          onChange={handleChange}
        />
        </label>
        <input type="submit" />
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);

==============================================TEXT Area ===================================
1. In React the value of a textarea is placed in a value attribute. We'll use the useState Hook to manage the value of the textarea:


import { useState } from 'react';
import ReactDOM from 'react-dom/client';

function MyForm() {
  const [textarea, setTextarea] = useState(
    "The content of a textarea goes in the value attribute"
  );

  const handleChange = (event) => {
    setTextarea(event.target.value)
  }

  return (
    <form>
      <textarea value={textarea} onChange={handleChange} />
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);

===========================================DROP DOWN OR SELECT BOX +=================================================================
1. In React, the selected value is defined with a value attribute on the select tag:

import { useState } from "react";
import ReactDOM from "react-dom/client";

function MyForm() {
  const [myCar, setMyCar] = useState("Volvo");

  const handleChange = (event) => {
    setMyCar(event.target.value)
  }

  return (
    <form>
      <select value={myCar} onChange={handleChange}>
        <option value="Ford">Ford</option>
        <option value="Volvo">Volvo</option>
        <option value="Fiat">Fiat</option>
      </select>
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);


=========================================React Router ================================
Create React App doesn't include page routing.

React Router is the most popular solution.

1. npm i -D react-router-dom

Use React Router to route to pages based on URL:

1. We wrap our content first with <BrowserRouter>.
2. Then we define our <Routes>. An application can have multiple <Routes>. Our basic example only uses on

index.js:

import ReactDOM from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Layout from "./pages/Layout";
import Home from "./pages/Home";
import Blogs from "./pages/Blogs";
import Contact from "./pages/Contact";
import NoPage from "./pages/NoPage";

export default function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="blogs" element={<Blogs />} />
          <Route path="contact" element={<Contact />} />
          <Route path="*" element={<NoPage />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

==================== Pages// The <Outlet> renders the current route selected.| <Link> is used to set the URL and keep track of browsing history.

Layout.js:

import { Outlet, Link } from "react-router-dom";

const Layout = () => {
  return (
    <>
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/blogs">Blogs</Link>
          </li>
          <li>
            <Link to="/contact">Contact</Link>
          </li>
        </ul>
      </nav>

      <Outlet />
    </>
  )
};

export default Layout;
Home.js:

const Home = () => {
  return <h1>Home</h1>;
};

export default Home;
Blogs.js:

const Blogs = () => {
  return <h1>Blog Articles</h1>;
};

export default Blogs;
Contact.js:

const Contact = () => {
  return <h1>Contact Me</h1>;
};

export default Contact;
NoPage.js:

const NoPage = () => {
  return <h1>404</h1>;
};

export default NoPage;


============================== TODO List Memo | Use memo to keep the Todos component from needlessly re-rendering. |Using memo will cause React to skip rendering a component if its props have not changed.https://www.w3schools.com/REACT/react_memo.asp



=================================React CSS Styling ==========================

import React from 'react';
import ReactDOM from 'react-dom/client';

const Header = () => {
  return (
    <>
      <h1 style={{color: "red"}}>Hello Style!</h1>
      <p>Add a little style!</p>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);

============== Use backgroundColor instead of background-color:

const Header = () => {
  return (
    <>
      <h1 style={{backgroundColor: "lightblue"}}>Hello Style!</h1>
      <p>Add a little style!</p>
    </>
  );
}

=================Object stlying 

const Header = () => {
  const myStyle = {
    color: "white",
    backgroundColor: "DodgerBlue",
    padding: "10px",
    fontFamily: "Sans-Serif"
  };
  return (
    <>
      <h1 style={myStyle}>Hello Style!</h1>
      <p>Add a little style!</p>
    </>
  );
}
===================module css

my-style.module.css:
.bigblue {
  color: DodgerBlue;
  padding: 40px;
  font-family: Sans-Serif;
  text-align: center;
}

Car.js:
import styles from './my-style.module.css'; 

const Car = () => {
  return <h1 className={styles.bigblue}>Hello Car!</h1>;
}

export default Car;

==============

mport ReactDOM from 'react-dom/client';
import Car from './Car.js';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);




===========================================SASS FILE

1. Sass is a CSS pre-processor.

2. Sass files are executed on the server and sends CSS to the browser.

******************In Sass files you can use variables and other Sass functions: *********************************

Create a variable to define the color of the text:
///my-sass.scss:
$myColor: red;

h1 {
  color: $myColor;
}

import React from 'react';
import ReactDOM from 'react-dom/client';
import './my-sass.scss';

const Header = () => {
  return (
    <>
      <h1>Hello Style!</h1>
      <p>Add a little style!.</p>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);



================================================= React HOOKS : ================================================================================================
** Hooks allow us to "hook" into React features such as state and lifecycle methods.
1. Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.

2. You must import Hooks from react.
3. State generally refers to application data or properties that need to be tracked.

4. Hook Rules
There are 3 rules for hooks:

Hooks can only be called inside React function components.
Hooks can only be called at the top level of a component.
Hooks cannot be conditional
Note: Hooks will not work in React class components.

import React, { useState } from "react";
import ReactDOM from "react-dom/client";

function FavoriteColor() {
// Initialize state at the top of the function component.
  const [color, setColor] = useState("red"); | color, is our current state. | setColor, is the function that is used to update our state. | We can now include our state anywhere in our component.

  return (
    <>
      <h1>My favorite color is {color}!</h1>
      <button
        type="button"
        onClick={() => setColor("blue")} | update state 
      >Blue</button>
  
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<FavoriteColor />);

// Multiple state
function Car() {
  const [brand, setBrand] = useState("Ford");
  const [model, setModel] = useState("Mustang");
  const [year, setYear] = useState("1964");
  const [color, setColor] = useState("red");
  
  return (
    <>
      <h1>My {brand}</h1>
      <p>
        It is a {color} {model} from {year}.
      </p>
    </>
  )
}

====== Or, we can just use one state and include an object instead!

import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });

  return (
    <>
      <h1>My {car.brand}</h1>
      <p>
        It is a {car.color} {car.model} from {car.year}.
      </p>
    </>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);


==================== Updating Objects and Arrays in State

1. If we only called setCar({color: "blue"}), this would remove the brand, model, and year from our state.

2. Use the JavaScript spread operator to update only the color of the car:

import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });

  const updateColor = () => {
    setCar(previousState => {
      return { ...previousState, color: "blue" }
    });
  }

  return (
    <>
      <h1>My {car.brand}</h1>
      <p>
        It is a {car.color} {car.model} from {car.year}.
      </p>
      <button
        type="button"
        onClick={updateColor}React useEffect Hooks
      >Blue</button>
    </>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);

==================================== React useEffect Hooks ====================================
1. side effects are: fetching data, directly updating the DOM, and timers
2. useEffect(<function>, <dependency>) 

mport { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  }, []); // <- add empty brackets here

  return <h1>I've rendered {count} times!</h1>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Timer />);


============================== React Context =============

1. React Context is a way to manage state globally. Like passing variables or props in a nested functions or component
2. It can be used together with the useState
3. To create context, you must Import createContext and initialize it:
4. Wrap child components in the Context Provider and supply the state value.
5. Now, all components in this tree will have access to the user Context.

*********************
import { useState, createContext } from "react";
import ReactDOM from "react-dom/client";

const UserContext = createContext()
function Component1() {
  const [user, setUser] = useState("Jesse Hall");

  return (
    <UserContext.Provider value={user}>
      <h1>{`Hello ${user}!`}</h1>
      <Component2 user={user} />
    </UserContext.Provider>
  );
}

*******************In order to use the Context in a child component, we need to access it using the useContext Hook.

import { useState, createContext, useContext } from "react";
import ReactDOM from "react-dom/client";

const UserContext = createContext();

function Component1() {
  const [user, setUser] = useState("Jesse Hall");

  return (
    <UserContext.Provider value={user}>
      <h1>{`Hello ${user}!`}</h1>
      <Component2 />
    </UserContext.Provider>
  );
}

function Component2() {
  return (
    <>
      <h1>Component 2</h1>
      <Component3 />
    </>
  );
}

function Component3() {
  return (
    <>
      <h1>Component 3</h1>
      <Component4 />
    </>
  );
}

function Component4() {
  return (
    <>
      <h1>Component 4</h1>
      <Component5 />
    </>
  );
}

function Component5() {
  const user = useContext(UserContext);

  return (
    <>
      <h1>Component 5</h1>
      <h2>{`Hello ${user} again!`}</h2>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Component1 />);

======================================== React UseRef =========================
1. The useRef Hook allows you to persist values between renders.

2. It can be used to store a mutable value that does not cause a re-render when updated.

3. It can be used to access a DOM element directly.
4. useRef() only returns one item. It returns an Object called current.
5. When we initialize useRef we set the initial value: useRef(0).| It's like doing this: const count = {current: 0}. We can access the count by using count.current.

import { useState, useEffect, useRef } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const [inputValue, setInputValue] = useState("");
  const count = useRef(0);

  useEffect(() => {
    count.current = count.current + 1;
  });

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h1>Render Count: {count.current}</h1>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);


================================= Accessing DOM Elements

1. In React, we can add a ref attribute to an element to access it directly in the DOM.
import { useRef } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const inputElement = useRef();

  const focusInput = () => {
    inputElement.current.focus();
  };

  return (
    <>
      <input type="text" ref={inputElement} />
      <button onClick={focusInput}>Focus Input</button>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

/*
By clicking the button,
the input field will get focus.
*/

=============================== == useRef Tracking State Changes | Hook can also be used to keep track of previous state values.
1. This is because we are able to persist useRef values between renders.

import { useState, useEffect, useRef } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const [inputValue, setInputValue] = useState("");
  const previousInputValue = useRef("");

  useEffect(() => {
    previousInputValue.current = inputValue;
  }, [inputValue]);

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h2>Current Value: {inputValue}</h2>
      <h2>Previous Value: {previousInputValue.current}</h2>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

/*
Start typing in the input field and you will
see the current- and previous value.
*/

============================Read on Reducer hooks for tracking multiple states ========
1. If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.

useReducer(<reducer>, <initialState>)

https://www.w3schools.com/REACT/react_usereducer.asp




============================= React useMemo Hook The React useMemo Hook returns a memoized value.

1. Think of memoization as caching a value so that it does not need to be recalculated.






======================================================================================= REACT VIDEO TUTORIAL ======================================================

Get Started -

1. Node Js // on ubunu install node js snap // sudo snap install node --classic
2. once downloaded it comes with NPM // to update node use "sudo snap refresh node --channel=22"

3. NVM == node version manager // https://github.com/nvm-sh/nvm   // makes it easy to switch between node version
3. a  // curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
4. nvm ls || nvm list-remote .....
5. then install node version from the nvm list nvm install v16.20.0 || to switch ....NVM use system | the node version

6. https://chromewebstore.google.com/?pli=1 // download react dev tools| React Developer tools

 npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!


=======================================
*******create react app
1. npx create-react-app reactproject
2. on VSCode extension ==> search for es7 react 
3. Go to file | preferences | Setting| type for emmet and add in the key javascript and javascriptreact in the value
4. In the project folder type code . it will open a new instance of VSCODE

====================== in the app.js function the code contains jsx

1. npm start  || ctr C = stop the app

==========================

1. index.js
2. 
<p> {"Kambaragye"}</p>
 <p> {[1,2,3]}</p>
 /* objecet and boolean can not be rendered  */}
<p> {{a:1,b:2,c:3}}</p> 

=========  _rafce : helps in creatinf functional componet from the snippet // windows

========  rafce : helps in creatinf functional componet from the snippet // unbuntu

=================== Adding style look at style.component / website

inline style 

const Header = () => {
 const headerStyle = {
    
    backgroundColor: 'mediumblue',
    color:'#fff'
 }

  return (
    <header style={headerStyle}>

        <h1> Groceries List</h1>
      
    </header>
  )
}

===================icon /// npmjs.com | https://www.npmjs.com/package/react-icons

//// https://github.com/gitdagray/react_resources?tab=readme-ov-file /// Github for the tutorial
====================== use destruction instead of props

1. props.title use {title}

======react-icons to production dependency

npm i react-icons --save-prod

npm i colornames -S /// add color names


============================ local storage is in application on the dev tab

Json server . it will allow you to launch development api == go to npmjs.com search for json-server

---use npmx insteade of npm  // npx json-server -p 3500 -w data/db.json

./// fragment error is cause by using old react script version update it: npm audit fix --force 

// api for fetching data https://jsonplaceholder.typicode.com/guide/


//// map through each key of the object use object.entries       // json.stringfy() still applies


// react router cd to the project directory and npm i react-router-dom -S


//// To fix Switch is not found error

npm uninstall react-router-dom
And installed version 5.2.0 of react-router-dom:

npm install react-router-dom@5.2.0

// racef // for creating function automatically

// import date function :  npm i date-fns -S


============ setting react height and width use flex boxes == look at reactrouterheightwidth project

Axios api makes the fetch easily than the fectch api // https://www.npmjs.com/package/axios

then launch json server : npx json-server -p 3500 -w data/db.json

collection of react hooks // https://nikgraf.github.io/react-hooks/

==== install react icons =========== npm i react-icons

Network Error run the json server   npx json-server -p 3500 -w data/db.json

============= to uninstall go to package.json and look for library depencies to uninstall  "axios": "^1.7.8",

***  npm uninstall axios u can uninstall many packages by leaving spaces

================== Install easy peasy 

npm i easy-peasy  // it puts actions and async action


// form submission cancelled.

<button type="submit" onClick={() => handleEdit(post.id)}>Submit</button> change to the type to button


// put all the components in their own components folder and route them correctly


/// deploying to production.

check package.json for depepencies we are not using // npm uninstall ...name


